name: Label-Driven Release

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'

concurrency:
  group: auto-commit-${{ github.ref }}

jobs:
  create_release:
    if: |
      github.event.pull_request.merged == true &&
      (
        contains(github.event.pull_request.labels.*.name, 'release:patch') ||
        contains(github.event.pull_request.labels.*.name, 'release:minor') ||
        contains(github.event.pull_request.labels.*.name, 'release:major')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and semver
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
      - run: npm install semver

      - name: Determine Version and Last Tag
        id: versioning
        run: |
          LABELS='${{ toJSON(github.event.pull_request.labels.*.name) }}'
          if [[ "$LABELS" == *"release:major"* ]]; then BUMP_LEVEL="major";
          elif [[ "$LABELS" == *"release:minor"* ]]; then BUMP_LEVEL="minor";
          else BUMP_LEVEL="patch"; fi
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          LATEST_TAG=""
          if [[ "$BASE_BRANCH" =~ ^([0-9]+)\.x$ ]]; then
            MAJOR_VERSION="${BASH_REMATCH[1]}"
            LATEST_TAG=$(git tag -l "${MAJOR_VERSION}.*" --sort="version:refname" | tail -n 1)
          else
            LATEST_TAG=$(git tag --sort="version:refname" | grep -v -- '-[a-zA-Z]' | tail -n 1)
          fi
          if [[ -z "$LATEST_TAG" ]]; then
            echo "No previous tag found. Creating initial version."
            if [[ "$BUMP_LEVEL" == "major" ]]; then NEW_VERSION="1.0.0";
            elif [[ "$BUMP_LEVEL" == "minor" ]]; then NEW_VERSION="0.1.0";
            else NEW_VERSION="0.0.1"; fi
          else
            NEW_VERSION=$(npx semver -i "$BUMP_LEVEL" "$LATEST_TAG")
          fi
          echo "Latest Tag: $LATEST_TAG"
          echo "New Version: $NEW_VERSION"
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate Changelog Body
        id: changelog
        run: |
          FROM_REF="${{ steps.versioning.outputs.latest_tag }}"
          TO_REF="${{ github.event.pull_request.merge_commit_sha }}"
          if [[ -z "$FROM_REF" ]]; then COMMIT_RANGE="$TO_REF"; else COMMIT_RANGE="$FROM_REF..$TO_REF"; fi
          LOG_BODY=$(git log $COMMIT_RANGE --pretty="### %s%n%b")
          if [[ -z "$LOG_BODY" ]]; then
            LOG_BODY="Initial release."
          fi
          echo "changelog_body<<EOF" >> "$GITHUB_OUTPUT"
          echo "$LOG_BODY" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"


      - name: Update Changelog, Tag, and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.versioning.outputs.new_version }}
          CHANGELOG_BODY: ${{ steps.changelog.outputs.changelog_body }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
          MERGE_COMMIT_SHA: ${{ github.event.pull_request.merge_commit_sha }}
        run: |
          # --- 1. PREPARE THE CHANGELOG CONTENT ---
          # Get the current date in YYYY-MM-DD format
          RELEASE_DATE=$(date +'%Y-%m-%d')

          # Create a title that includes both the version and the date
          FULL_RELEASE_TITLE="Release $NEW_VERSION ($RELEASE_DATE)"

          # Create the Markdown H1 title for the changelog file
          CHANGELOG_TITLE_MARKDOWN="# $FULL_RELEASE_TITLE"
          CHANGELOG_ENTRY="$CHANGELOG_TITLE_MARKDOWN\n\n$CHANGELOG_BODY"

          # Use a temporary file to safely prepend the new content
          if [[ -f CHANGELOG.md ]]; then
            echo -e "$CHANGELOG_ENTRY\n\n---\n\n" | cat - CHANGELOG.md > temp_changelog.md && mv temp_changelog.md CHANGELOG.md
          else
            echo -e "$CHANGELOG_ENTRY" > CHANGELOG.md
          fi

          # --- 2. COMMIT THE CHANGELOG UPDATE ---
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "chore(release): Update CHANGELOG for $NEW_VERSION"

          # --- 3. CREATE TAG AND PUSH ---
          git tag "$NEW_VERSION"
          git push origin "HEAD:$BASE_BRANCH"
          git push origin "$NEW_VERSION"

          # --- 4. CREATE THE GITHUB RELEASE ---
          # Use the same full title for the GitHub Release
          gh release create "$NEW_VERSION" \
            --repo "${{ github.repository }}" \
            --title "$FULL_RELEASE_TITLE" \
            --notes "$CHANGELOG_BODY" \
            --target "$MERGE_COMMIT_SHA"